package dark.gsm.common.artillects.bots;

import hydraulic.helpers.FluidHelper;
import net.minecraft.entity.EntityCreature;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;
import universalelectricity.core.vector.Vector3;
import universalelectricity.prefab.implement.IDisableable;

public abstract class EntityRobot extends EntityCreature implements IDisableable
{
	/* Energy stored in the internal battery */
	private double wattsStored = 0;
	/* Temp value for the robots group */
	private String faction = "world";
	private String displayName = "Robot";
	/* Data watch values */
	private static final int powerWatcher = 17;

	private int disableTime = 0;

	public EntityRobot(World par1World)
	{
		super(par1World);
		this.isImmuneToFire = true;
		this.experienceValue = 10;
	}

	@Override
	protected void entityInit()
	{
		super.entityInit();
		this.dataWatcher.addObject(powerWatcher, new Byte((byte) 0));
	}

	@Override
	public void onLivingUpdate()
	{
		this.updateArmSwingProgress();
		if (this.disableTime > 0)
		{
			this.disableTime--;
		}
		if (this.getHealth() < ((int) this.getMaxHealth() / 10))
		{
			for (int i = 0; i < 2; ++i)
			{
				this.worldObj.spawnParticle("largesmoke", this.posX + (this.rand.nextDouble() - 0.5D) * (double) this.width, this.posY + this.rand.nextDouble() * (double) this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double) this.width, 0.0D, 0.0D, 0.0D);
			}
		}
		if (!this.worldObj.isRemote)
		{
			/* Solor power handler */// TODO check for sight of sky
			double solorPower = this.getSolorPower(this.getBrightness(1.0F));
			if (solorPower > 0 && this.worldObj.canBlockSeeTheSky((int) this.posX, (int) this.posY, (int) this.posZ))
			{
				this.wattsStored += solorPower;
			}

			/* Data Watcher setter for power updates */
			this.setPowerWatcher(this.wattsStored);
		}
		else
		{
			this.wattsStored = this.getPower();
		}
		if (this.wattsStored >= this.getRunningWatts())
		{
			this.wattsStored -= this.getRunningWatts();
			super.onLivingUpdate();
			this.runningUpdate();
		}
	}

	/**
	 * Logic or running operation of the bot after power checks
	 */
	public abstract void runningUpdate();

	/**
	 * watts needed to just keep the bot running.
	 */
	public abstract int getRunningWatts();

	@Override
	public int getMaxHealth()
	{
		return 50;
	}

	@Override
	public boolean getCanSpawnHere()
	{
		return false;
	}

	/**
	 * Value of solar power generated by this robot
	 * 
	 * @param brightness - above 0.5 is consider sunlight bright
	 * 
	 * @return amount of watts generated per tick of sunlight
	 */
	public double getSolorPower(float brightness)
	{
		return 0;
	}

	@Override
	public boolean canBreatheUnderwater()
	{
		return true;
	}

	@Override
	public void writeEntityToNBT(NBTTagCompound nbt)
	{
		super.writeEntityToNBT(nbt);
		nbt.setDouble("watts", this.wattsStored);
		nbt.setString("factionName", this.faction);
	}

	@Override
	public void readEntityFromNBT(NBTTagCompound nbt)
	{
		super.readEntityFromNBT(nbt);
		this.wattsStored = nbt.getDouble("watts");
		this.faction = nbt.getString("factionName");
	}

	/**
	 * Current power level of the bot
	 */
	public double getPower()
	{
		return (double) this.dataWatcher.getWatchableObjectByte(powerWatcher);
	}

	/**
	 * updates the dataWatcher's power level of the bot
	 */
	public void setPowerWatcher(double power)
	{
		this.dataWatcher.updateObject(powerWatcher, Byte.valueOf((byte) power));
	}

	@Override
	public float getBlockPathWeight(int x, int y, int z)
	{
		Vector3 vec = new Vector3(x, y, z);
		int blockID = vec.getBlockID(this.worldObj);
		int meta = vec.getBlockMetadata(this.worldObj);
		if (FluidHelper.getLiquidFromBlockId(blockID) != null)
		{
			return -10.0F;
		}
		return 0.0F;
	}

	@Override
	public void onDisable(int duration)
	{
		this.disableTime += duration;
	}

	@Override
	public boolean isDisabled()
	{

		return this.disableTime > 0;
	}
}
