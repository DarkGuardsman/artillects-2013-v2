package dark.gsm.artillects.common;

import java.io.File;
import java.util.Arrays;
import java.util.logging.Logger;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraftforge.common.Configuration;

import org.modstats.ModstatInfo;

import universalelectricity.prefab.TranslationHelper;
import cpw.mods.fml.common.FMLLog;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.Metadata;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import dark.gsm.artillects.common.blocks.BlockCreep;
import dark.gsm.artillects.common.blocks.BlockWireRotation;
import dark.gsm.artillects.common.blocks.TileEntityWireFrame;
import dark.gsm.artillects.common.bots.EntityEyeBot;
import dark.gsm.core.common.GSMCore;

@ModstatInfo(prefix = GSMMachines.NAME)
@Mod(modid = GSMMachines.NAME, name = GSMMachines.NAME, version = GSMMachines.VERSION, useMetadata = true)
@NetworkMod(clientSideRequired = true, serverSideRequired = false)
public class GSMMachines extends GSMCore
{

    // @Mod
    public static final String NAME = GSMCore.NAME + "|Artillects";

    @Metadata(GSMMachines.NAME)
    public static ModMetadata meta;

    /* SUPPORTED LANGS */
    private static final String[] LANGUAGES_SUPPORTED = new String[] { "en_US" };

    /* CONFIG FILE */
    public static final Configuration BOT_CONFIG = new Configuration(new File(Loader.instance().getConfigDir() + "/dark/", "Artillects.cfg"));

    public static Block creepBlock, wireFrameBlock;

    public static Item botSpawner;

    @SidedProxy(clientSide = "dark.gsm.artillects.common.ClientProxy", serverSide = "dark.gsm.artillects.common.CommonProxy")
    public static dark.gsm.artillects.common.CommonProxy proxy;

    @Instance(GSMMachines.NAME)
    public static GSMMachines instance;

    /* LOGGER - EXTENDS FORGE'S LOG SYSTEM */
    public static Logger FMLog = Logger.getLogger(GSMMachines.NAME);

    @Override
    @EventHandler
    public void preInit(FMLPreInitializationEvent event)
    {
        super.preInit(event);
        /* LOGGER SETUP */
        FMLog.setParent(FMLLog.getLogger());
        FMLog.fine("Initializing...");

        instance = this;

        /* UPDATE NOTIFIER */
        // Modstats.instance().getReporter().registerMod(this);

        /* CONFIGS */
        BOT_CONFIG.load();
        creepBlock = new BlockCreep((BOT_CONFIG.getBlock("creep", ++BLOCK_ID_PREFIX).getInt()));
        wireFrameBlock = new BlockWireRotation((BOT_CONFIG.getBlock("wireFrame", ++BLOCK_ID_PREFIX).getInt()));
        botSpawner = new ItemRobot((BOT_CONFIG.getItem("spawnTool", ++ITEM_ID_PREFIX).getInt()));
        if (BOT_CONFIG.hasChanged())
        {
            BOT_CONFIG.save();
        }
        // RenderingRegistry.registerEntityRenderingHandler(EntityCollector.class, new
        // RenderSpidBot());
        // EyeBot
        EntityRegistry.registerGlobalEntityID(EntityEyeBot.class, "GSMEyeBot", EntityRegistry.findGlobalUniqueEntityId());
        EntityRegistry.registerModEntity(EntityEyeBot.class, "GSMEyeBot", EntityRegistry.findGlobalUniqueEntityId(), instance, 60, 1, true);

        /* CONFIG END */
        GameRegistry.registerBlock(creepBlock, "blockCreep");
        GameRegistry.registerBlock(wireFrameBlock, "blockWireFrame");
        GSMMachines.proxy.preInit();

    }

    @EventHandler
    public void Init(FMLInitializationEvent event)
    {
        super.init(event);
        /* MCMOD.INFO FILE BUILDER? */
        meta.modId = GSMMachines.NAME;
        meta.name = GSMMachines.NAME;
        meta.description = "Hostile Artifical intellegence robotic entities designed to replicate and challange the player on several diffrent key points. These AIs will self build, create new areas, consume everything they can, and will not stop till the player stops them.";
        meta.url = "www.BuiltBroken.com";

        meta.logoFile = GSMCore.TEXTURE_DIRECTORY + "Art_Banner.png";
        meta.version = GSMCore.VERSION;
        meta.authorList = Arrays.asList(new String[] { "DarkGuardsman AKA DarkCow" });
        meta.credits = "Please see the website.";
        meta.autogenerated = false;

        /* LOGGER */
        FMLog.info("Loading...");
        proxy.Init();

        GameRegistry.registerTileEntity(TileEntityWireFrame.class, "WireFrameTest");

        /* LANG LOADING */
        FMLog.info(" Loaded: " + TranslationHelper.loadLanguages(LANGUAGE_PATH, LANGUAGES_SUPPORTED) + " Languages.");

    }

    @EventHandler
    public void PostInit(FMLPostInitializationEvent event)
    {
        super.postInit(event);
        /* LOGGER */
        FMLog.info("Finalizing...");
        proxy.postInit();

        FMLog.info("Done Loading");
    }
}
